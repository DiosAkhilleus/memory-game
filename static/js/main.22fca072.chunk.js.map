{"version":3,"sources":["Components/Card.js","App.js","index.js"],"names":["Card","name","letter","onClick","ind","className","App","useState","titles","setTitles","scoreArray","setScoreArray","currentScore","setCurrentScore","bestScore","setBestScore","useEffect","cardClick","e","el","shuffledTitles","array","t","i","m","length","Math","floor","random","shuffle","editableScore","console","log","indexOf","push","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAgBeA,EAdF,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,OAAaC,GAAc,EAAnBC,IAAmB,EAAdD,SAE/B,OACI,sBAAKE,UAAU,OAAOF,QAASA,EAA/B,UACI,qBAAKE,UAAU,cAAf,SACKH,IAEL,qBAAKG,UAAU,YAAf,SACKJ,QC4DFK,MAlEf,WAAgB,IAAD,EAEeC,mBAAS,CAAC,CAAC,QAAS,UAAM,CAAC,OAAQ,UAAM,CAAC,QAAS,UAAM,CAAC,QAAS,UAAM,CAAC,UAAW,UAAM,CAAC,OAAQ,UAAO,CAAC,MAAO,UAAM,CAAC,QAAS,UAAO,CAAC,OAAQ,UAAM,CAAC,QAAS,UAAM,CAAC,SAAU,UAAM,CAAC,KAAM,YAFhN,mBAENC,EAFM,KAEEC,EAFF,OAGuBF,mBAAS,IAHhC,mBAGNG,EAHM,KAGMC,EAHN,OAI2BJ,mBAAS,GAJpC,mBAINK,EAJM,KAIQC,EAJR,OAKqBN,mBAAS,GAL9B,mBAKNO,EALM,KAKKC,EALL,KAQbC,qBAAU,WACJJ,EAAeE,GACjBC,EAAaH,KAEd,CAACA,IAEJ,IAkBMK,EAAY,SAACC,EAAGC,GACpB,IAAIC,EAnBU,SAACC,GAIf,IAHA,IAAsBC,EAAGC,EAArBC,EAAIH,EAAMI,OAGPD,GAGLD,EAAIG,KAAKC,MAAMD,KAAKE,SAAWJ,KAG/BF,EAAID,EAAMG,GACVH,EAAMG,GAAKH,EAAME,GACjBF,EAAME,GAAKD,EAGb,OAAOD,EAIcQ,CAAQ,CAAC,CAAC,QAAS,UAAM,CAAC,OAAQ,UACzB,CAAC,QAAS,UAAM,CAAC,QAAS,UAC1B,CAAC,UAAW,UAAM,CAAC,OAAQ,UAC3B,CAAC,MAAO,UAAM,CAAC,QAAS,UACxB,CAAC,OAAQ,UAAM,CAAC,QAAS,UACzB,CAAC,SAAU,UAAM,CAAC,KAAM,YACtDpB,EAAUW,GACV,IAAIU,EAAgBpB,EACpBqB,QAAQC,IAAIF,EAAeX,IACW,IAAlCW,EAAcG,QAAQd,EAAG,KAC3BN,EAAgBD,EAAe,GAC/BkB,EAAcI,KAAKf,EAAG,IACtBR,EAAcmB,KAEdnB,EAAc,IACdE,EAAgB,KAKpB,OACE,sBAAKR,UAAU,MAAf,UACE,wBAAQA,UAAU,SAAlB,8BACA,4JACA,yCAAYO,KACZ,8CAAiBE,KACjB,qBAAKT,UAAU,oBAAf,SACGG,EAAO2B,KAAI,SAAChB,EAAIf,GAAL,OAAa,cAAC,EAAD,CAAMD,QAAS,SAACe,GAAOD,EAAUC,EAAGC,IAAMlB,KAAMkB,EAAG,GAAIjB,OAAQiB,EAAG,IAASf,YC5D5GgC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.22fca072.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = ({ name, letter, ind, onClick }) => {\n\n    return (\n        <div className='card' onClick={onClick}>\n            <div className='card-letter'>\n                {letter}\n            </div>\n            <div className='card-name'>\n                {name}\n            </div>\n        </div>\n    )\n}\n\nexport default Card\n","import './App.css';\nimport Card from './Components/Card'\nimport { useState, useEffect } from 'react'\n\nfunction App() {\n\n  const [titles, setTitles] = useState([['Alpha', 'α'], ['Beta', 'β'], ['Gamma', 'γ'], ['Delta', 'δ'], ['Epsilon', 'ε'], ['Zeta', 'ζ'],  ['Eta', 'η'], ['Theta', 'θ'],  ['Iota', 'ι'], ['Kappa', 'κ'], ['Lambda', 'λ'], ['Mu', 'μ']]);\n  const [scoreArray, setScoreArray] = useState([]);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n\n\n  useEffect(() => {\n    if (currentScore > bestScore) {\n      setBestScore(currentScore);\n    }\n  }, [currentScore])\n\n  const shuffle = (array) => {\n    let m = array.length, t, i;\n\n  // While there remain elements to shuffle…\n    while (m) {\n\n      // Pick a remaining element…\n      i = Math.floor(Math.random() * m--);\n\n      // And swap it with the current element.\n      t = array[m];\n      array[m] = array[i];\n      array[i] = t;\n    }\n\n    return array;\n  } \n\n  const cardClick = (e, el) => {\n    let shuffledTitles = shuffle([['Alpha', 'α'], ['Beta', 'β'], \n                                  ['Gamma', 'γ'], ['Delta', 'δ'], \n                                  ['Epsilon', 'ε'], ['Zeta', 'ζ'],  \n                                  ['Eta', 'η'], ['Theta', 'θ'],  \n                                  ['Iota', 'ι'], ['Kappa', 'κ'], \n                                  ['Lambda', 'λ'], ['Mu', 'μ']]);\n    setTitles(shuffledTitles);\n    let editableScore = scoreArray;\n    console.log(editableScore, el);\n    if (editableScore.indexOf(el[0]) === -1) {\n      setCurrentScore(currentScore + 1);\n      editableScore.push(el[0]);\n      setScoreArray(editableScore);\n    } else {\n      setScoreArray([]);\n      setCurrentScore(0);\n    }\n    \n  }\n\n  return (\n    <div className=\"App\">\n      <header className='header'>Memory Card Game</header>\n      <h2>Get points by clicking on a card you haven't clicked before. If you click on one a second time, your score will reset to 0</h2>\n      <h3>Score: {currentScore}</h3>\n      <h3>Best Score: {bestScore}</h3>\n      <div className='content-container'>\n        {titles.map((el, ind) => <Card onClick={(e) => {cardClick(e, el)}} name={el[0]} letter={el[1]} key={ind}/>)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}